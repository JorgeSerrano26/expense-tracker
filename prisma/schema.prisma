generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  provider                String
  providerId              String
  email                   String                   @unique
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  cards                   Card[]
  expenses                Expense[]
  friends                 Friend[]
  installmentParticipants InstallmentParticipant[]
  borrowedLoans           Loan[]                   @relation("BorrowerLoans")
  lentLoans               Loan[]                   @relation("LenderLoans")
  subscriptions           Subscription[]

  @@map("users")
}

model Friend {
  id                      Int                      @id @default(autoincrement())
  userId                  String?
  name                    String
  email                   String
  createdAt               DateTime                 @default(now())
  user                    User?                    @relation(fields: [userId], references: [id])
  installmentParticipants InstallmentParticipant[]

  @@map("friends")
}

model Card {
  id          Int       @id @default(autoincrement())
  userId      String
  type        CardType
  bank        String?
  lastDigits  String?
  description String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses    Expense[]

  @@map("cards")
}

model Currency {
  id            Int            @id @default(autoincrement())
  code          String         @unique
  description   String
  expenses      Expense[]
  loans         Loan[]
  subscriptions Subscription[]

  @@map("currencies")
}

model Expense {
  id                  Int                  @id @default(autoincrement())
  userId              String
  paymentType         PaymentType
  cardId              Int?
  currencyId          Int
  description         String
  amount              Decimal              @db.Decimal(10, 2)
  installments        Int                  @default(1)
  createdAt           DateTime             @default(now())
  expenseInstallments ExpenseInstallment[]
  card                Card?                @relation(fields: [cardId], references: [id])
  currency            Currency             @relation(fields: [currencyId], references: [id])
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model ExpenseInstallment {
  id                      Int                      @id @default(autoincrement())
  expenseId               Int
  number                  Int
  amount                  Decimal                  @db.Decimal(10, 2)
  dueDate                 DateTime
  createdAt               DateTime                 @default(now())
  expense                 Expense                  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  installmentParticipants InstallmentParticipant[]

  @@map("expense_installments")
}

model InstallmentParticipant {
  id            Int                @id @default(autoincrement())
  installmentId Int
  userId        String?
  friendId      Int?
  type          ParticipantType
  amount        Decimal            @db.Decimal(10, 2)
  paid          Boolean            @default(false)
  paidAt        DateTime?
  friend        Friend?            @relation(fields: [friendId], references: [id])
  installment   ExpenseInstallment @relation(fields: [installmentId], references: [id], onDelete: Cascade)
  user          User?              @relation(fields: [userId], references: [id])

  @@map("installment_participants")
}

model Subscription {
  id          Int                   @id @default(autoincrement())
  userId      String
  currencyId  Int
  description String
  amount      Decimal               @db.Decimal(10, 2)
  type        SubscriptionFrequency
  startDate   DateTime
  endDate     DateTime?
  currency    Currency              @relation(fields: [currencyId], references: [id])
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Loan {
  id           Int       @id @default(autoincrement())
  borrowerId   String
  lenderId     String
  currencyId   Int
  amount       Decimal   @db.Decimal(10, 2)
  installments Int       @default(1)
  paid         Boolean   @default(false)
  interestRate Decimal?  @db.Decimal(5, 4)
  startDate    DateTime
  endDate      DateTime?
  borrower     User      @relation("BorrowerLoans", fields: [borrowerId], references: [id])
  currency     Currency  @relation(fields: [currencyId], references: [id])
  lender       User      @relation("LenderLoans", fields: [lenderId], references: [id])

  @@map("loans")
}

enum CardType {
  DEBIT
  CREDIT
}

enum PaymentType {
  CASH
  CARD
  TRANSFER
}

enum ParticipantType {
  FIXED
  PERCENTAGE
}

enum SubscriptionFrequency {
  DAILY
  MONTHLY
  YEARLY
}
